3.1
A)
1.hello.c
	1 Appears 24 times
	
	2 OMP_NUM_THREADS=4 ./1.hello
	
2.hello.c
	1 La execució no és correcte. S'ha d'afegir:
			#pragma omp critical
			{
				id = omp...;
				print...;
				print...;
			}
		
	2 Apareixen desordenades, perquè arriben al critical amb temps diferents.
		0/4/1/5/6/3/2/7
		0/2/3/1/4/6/7/5
	
3.how.many.c
	1. 20 times
		
	2. Fora de la regió paral·lela ens retorna un 1, un cop estas dins de la regió paral·lela,
		et trobes tres vegades "#pragma omp parallel" i una vegada "#pragma omp parallel num_threads(4)".
		El primer cop que et trobes "#pragma omp parallel" imprimeix el valor de "OMP_NUMBER_THREADS", els altres dos cops
		et retorna la i de l'ultim cop que has cridat "omp_set_number_threads(i)".
		Quan et trobes "#pragma omp parallel num_threads(4)" et retorna directament 4.
		
4.data.sharing.c
	1.	- shared: 128
		- private: 5
		- firstprivate: 5
		- reduction: 125
	2. Sí perquè se com funciona
	
B)
1.schedule.c
	1. 	- static: Et divideix les iteracions en 4 blocs iguals on cada thread, per ordre, t'agafarà 1 bloc.
		- saticc,2: Et divideix les iteracions en blocs de 2 iteracions, on cada thread per ordre t'agafarà 1 bloc:
			Thread 0: Bloc 0 i 4,
			Thread 1: Bloc 1 i 5,
			Thread 2: Bloc 2 i 6,
			Thread 3: Bloc 3 i 7
		- dynamic,2: Et divideix les iteracions en blocs de 2 iteracions, però distribueix els blocs, el primer thread que acaba,
			agafa el següent bloc lliure.
		- guided,2: El primer thread lliure agafarà un bloc de n/p, el segon (n - n/p)/p, fins que els blocs siguin de 2 iteracions
			on cada thread lliure agafarà un bloc.

2.nowait.c
	1. 
		Loop 1: thread (0)...
		Loop 1: thread (2)...
		Loop 2: thread (1)...
		Loop 2: thread (3)...
		
	2. En el primer for entren dos threads, i els altres dos s'han d'esperar 2 segons sense fer res.
	
	3. Com que es static, sempre s'assignaràn al thread 0 i al 1.

3.collapse.c
	1.	
		Thread 0: 00, 01, 02, 03
		Thread 1: 04, 10, 11
		Thread 2: 12, 13, 14
		Thread 3: 20, 21, 22
		Thread 4: 23, 24, 30
		Thread 5: 31, 32, 33
		Thread 6: 34, 40, 41
		Thread 7: 42, 43, 44
	
	2. No, hi ha conflictes amb la j. modificant "#pragma omp parallel for private(j)"

D) TASKS
1.single.c
	1. Gracies a la single clause, només 1 thread executa el cos del bucle de cada iteració i gràcies al nowait els altres threads.
		no han de esperar a que finialitzi la iteració actual per anar a la següent.
		Els 4 threads es repartiràn les 4 primeres iteracions, el temps del print serà casi negligible i acontinuació tots les
		threads quedaràn parats 1 segon en l'sleep. Per aquest motiu ho veiem en ràfegues de 4.
	
2.fibtasks.c
	1. El programa no es paralitza, per tant tota l'estona només hi ha un thread, i per tant el thread 0 genererà totes les taskes.
	
