Leaf strategy:
2) (Ho hem fet amb un qsub)
par4110@boada-1:~/lab4$ cat multisort-omp_8_boada-2.times.txt 
Arguments (Kelements): N=32768, MIN_SORT_SIZE=1, MIN_MERGE_SIZE=1
                       CUTOFF=4
Initialization time in seconds: 0.818592
Multisort execution time: 1.578155
Check sorted data execution time: 0.023391
Multisort program finished

3) (Boada)
par4110@boada-1:~/lab4$ cat multisort-omp_8_boada-3.times.txt 
....
Arguments (Kelements): N=8192, MIN_SORT_SIZE=1, MIN_MERGE_SIZE=1
                       CUTOFF=4
Initialization time in seconds: 0.206935
Multisort execution time: 0.400170
Check sorted data execution time: 0.004163
Multisort program finished
....

A partir de una funció recursiva un dels threads crearà tasques al final de la recursió del multisort i del merge.
Executeran tasques tots els threads, inclús el que genera ja que quan hi haagi un taskwait aprofitarà per fer tasques.

4)

El problema es que com que un sol processador executa la part recursiva del codi i ell sol crea totes les tasques, els altres threads només executen els casos base.
Per aquest motiu arriba un moment en que hi ha treads que mai executen cap tasca perquè el numero de tasques a la pull sempre serà menor al nombre de threads totals.

Tree strategy:
2) (Ho hem fet amb un qsub)
par4110@boada-1:~/lab4$ cat multisort-omp_8_boada-4.times_tree.txt
Arguments (Kelements): N=32768, MIN_SORT_SIZE=1, MIN_MERGE_SIZE=1
                       CUTOFF=4
Initialization time in seconds: 0.840939
Multisort execution time: 0.959607
Check sorted data execution time: 0.020711
Multisort program finished

3) (Boada)
....
Arguments (Kelements): N=8192, MIN_SORT_SIZE=1, MIN_MERGE_SIZE=1
                       CUTOFF=4
Initialization time in seconds: 0.207377
Multisort execution time: 0.349332
Check sorted data execution time: 0.004724
Multisort program finished
....

En aquest cas observem que tots els threads creen tasques. Com que per cada recursió del programa es crea una tasca nova això porboca que es creiin moltes tasques.
Per aquest motiu com que ara la feina de molts threads fan el treball que feia només un en la leaf estrategy, proboca que el tems d'execució disminueixi.

4)
Com era d'esperar l'speedup en la funció multisort ha incrementat, perquè ara molts threads fan molt més treball del que feien abans.
Tot i així l'speedup de la aplicació completa no millora del tot, creiem que es culpa del merge, que no té gaire millora.


2.1 Cut-off
1) submit-omp-i.sh
....
Arguments (Kelements): N=8192, MIN_SORT_SIZE=1, MIN_MERGE_SIZE=1
                       CUTOFF=0
Initialization time in seconds: 0.215904
Multisort execution time: 0.455167
Check sorted data execution time: 0.005157
Multisort program finished
....

COm que el CUTOFF és zero només es creen tasques en nivell de recursió 0. Per això només n'observem 7.

2) submit-cutoff.sh
Mirant el graph resultant podem observar que el valor òptim està a un CUTOFF de 3. Això vol dir que en profunditat 3 tenim el millor balanç entre creació de tasques i execució d'aquestes.

3) submit-strong-omp.sh
Amb un cotoff de 3 hem pogut observar encara millor speedup que ense ell.














